//https://www.dotnettricks.com/learn/designpatterns/adapter-design-pattern-dotnet
//Adapter pattern acts as a bridge between two incompatible interfaces. This pattern involves a single class called adapter which is responsible for communication between two independent or incompatible interfaces.
// {type:class}
// {generate:true}
[Client|+MakeRequest()]->[<<interface>>;ITarget|+MethodA()]
[<<interface>>;ITarget|+MethodA()]^[Adapter|+MethodA()]
[Adaptee|+MethodB()]^[Adapter|+MethodA()]